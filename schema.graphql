type Factory @entity {
  id: ID! # Factory address
  accounts: [Account!]! @derivedFrom(field: "factory")
}

type Account @entity {
  id: ID! # Account address
  factory: Factory! # Relation to Factory entity
  owners: [Bytes!]! # Store the owners as an array of addresses
  holdings: [Holding!]! @derivedFrom(field: "account")
  investments: [Investment!]! @derivedFrom(field: "account")
  transactions: [Transaction!]! @derivedFrom(field: "account")
}

type Pool @entity {
  id: ID! # Pool address
  asset: Token!
  name: String!
  symbol: String!
  startTime: BigInt!
  endTime: BigInt!
  threshold: BigInt!
  amountToRaise: BigInt!
  feeBasisPoints: BigInt!
  estimatedReturnBasisPoints: BigInt!
  creditFacilitator: Bytes!
  term: BigInt!
  totalInvested: BigInt!
  fundsTaken: Boolean!
  repaid: Boolean!
  refunded: Boolean!
  investments: [Investment!]! @derivedFrom(field: "pool")
}

type Token @entity {
  id: ID! # Token address
  priceFeedAddress: Bytes! @index(unique: true)
  name: String!
  symbol: String!
  decimals: Int!
  lastPrice: BigInt!
  lastUpdate: BigInt!
  holdings: [Holding!]! @derivedFrom(field: "token")
}

type Holding @entity {
  id: ID! # Composite key: account address + token address
  account: Account!
  token: Token!
  amount: BigInt!
}

type Investment @entity {
  id: ID! # Composite key: account address + pool address
  account: Account!
  pool: Pool!
  shares: BigInt!
}

type Transaction @entity {
  id: ID! # Transaction hash
  account: Account!
  from: Bytes!
  to: Bytes!
  token: Token!
  timestamp: BigInt!
  amount: BigInt!
  value: BigInt!
  tag: TransactionTag!
}

type Analytics @entity {
  id: ID! # Single instance, can use "1" as id
  tvl: BigInt! # Total Value Locked across all pools
  totalInvestors: Int!
  totalPools: Int!
}

enum TransactionTag {
  DEPOSIT
  WITHDRAW
  INVEST
  REPAY
}
